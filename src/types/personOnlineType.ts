import type { AddressType } from "./addressType";
import type { ChartType } from "./chartType";
import type { DeficiencyType } from "./deficiencyType";
import type { DependentType } from "./dependentType";
import type { ProfessionType } from "./professionType";

export interface PersonOnlineType {
    id: number;
    legacySystemCode: number;
    registrationPassword: number;
    name: string;
    gender: string;
    birthDate: string;
    maritalStatus: ChartType;
    motherName: string;
    fatherName: string;
    nationality: string;
    naturalPlace: string;
    profession: ProfessionType;
    professionalStatus: ChartType;
    income: number;
    cpf: string;
    isWheelchair: boolean;
    hasChronicDisease: boolean;
    isElderly: boolean;
    hasPhysicalDisability: boolean;
    deficiency: DeficiencyType;
    rg: string;
    rgIssuer: string;
    rgState: ChartType;
    rgIssueDate: string;
    nis: string;
    spouseName: string;
    spouseGender: string;
    spouseBirthDate: string;
    spouseMotherName: string;
    spouseFatherName: string;
    spouseCpf: string;
    spouseRgNumber: string;
    phone: string;
    mobile: string;
    email: string;
    housingType: ChartType;
    areaType: ChartType;
    housingSituation: ChartType;
    rentValue: number;
    householdResponsibleGender: string;
    residenceTime: number;
    residenceTimeType: string;
    workNeighborhood: string;
    workRegion: string;
    wantsApartment: boolean;
    wantsHouse: boolean;
    wantsTownhouse: boolean;
    wantsLand: boolean;
    wantsLandAndMaterial: boolean;
    createdAt: string;
    updatedAt: string;
    spouseNis: string;
    benefitContractNumber: string;
    benefitedConjunto: string;
    benefitBlockNumber: string;
    benefitBlockCode: string;
    benefitLotNumber: string;
    benefitLotCode: string;
    benefitModule: string;
    isSpouseDependent: boolean;
    spouseNationality: string;
    contactPhone: string;
    projectId: number;
    programId: number;
    updatedViaKattle: boolean;
    socialName: string;
    hasChildrenUnder14: boolean;
    hasEldersAsDependents: boolean;
    isBloodDonor: string;
    spouseProfessionId: number;
    spouseProfessionStatusId: number;
    isViolenceVictim: boolean;
    contactName: string;
    socialNetwork: string;
    comonl: string;
    caponl: boolean;
    mpeonl: boolean;
    pimonl: boolean;
    dcionl: boolean;
    cras: boolean;
    creas: boolean;
    creditRestrictionFlag: string;
    wantsSubsidizedLoan: boolean;
    wantsSocialRentFlag: boolean;
    formattedIncome: string;
    formattedRentValue: string;
    ethnicity: string;
    indigenousEthnicity: string;
    spouseEthnicity: string;
    spouseIndigenousEthnicity: string;
    livesInVillage: boolean;
    isQuilombola: boolean;
    hasDisability: boolean;
    spouseHasDisability: boolean;
    spouseHasWorkLimitingDisease: boolean;
    spouseHasDegenerativeDisease: boolean;
    hasCancer: boolean;
    spouseHasCancer: boolean;
    spouseIsElderly: boolean;
    hasPrecariousHousing: boolean;
    isInCoHousing: boolean;
    hasOvercrowding: boolean;
    livesInRiskArea: boolean;
    hasExcessiveRentBurden: boolean;
    receivesRentSubsidy: boolean;
    isHomeless: boolean;
    hasDegenerativeDisease: boolean;
    spouseLivesInVillage: boolean;
    spouseIsQuilombola: boolean;
    spouseHasChronicDisease: boolean;
    sitpreonl: boolean;
    isSingleParentFamily: boolean;
    addresses: AddressType[];
    dependents: DependentType[];
}

export interface PersonOnlineSummary {
    id: number;
    name: string;
    formattedCpf: string;
    isElderly: string;
    hasDisability: string;
    referenceYear: number;
    status: string;
}

export interface PersonOnlineFilter {
    name: string;
    cpf: string;
    registrationPassword: string;
}  